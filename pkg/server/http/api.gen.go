// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ReporteVentasRequest defines model for ReporteVentasRequest.
type ReporteVentasRequest struct {
	Ventas *[]Venta `json:"ventas,omitempty"`
}

// TemplateRequest defines model for TemplateRequest.
type TemplateRequest struct {
	Data *struct {
		Cargo     *string `json:"cargo,omitempty"`
		Dd        *string `json:"dd,omitempty"`
		Levantada *string `json:"levantada,omitempty"`
		Mm        *string `json:"mm,omitempty"`
		Mmmm      *string `json:"mmmm,omitempty"`
		Name      *string `json:"name,omitempty"`
		Nombre    *string `json:"nombre,omitempty"`
		NumActa   *string `json:"num_acta,omitempty"`
		NumFolio  *string `json:"num_folio,omitempty"`
		Obra      *string `json:"obra,omitempty"`
		Template  *string `json:"template,omitempty"`
		Tramite   *string `json:"tramite,omitempty"`
		Ubicacion *string `json:"ubicacion,omitempty"`
		Url       *string `json:"url,omitempty"`
		Yyyy      *string `json:"yyyy,omitempty"`
	} `json:"data,omitempty"`
}

// Venta defines model for Venta.
type Venta struct {
	Cantidad *int     `json:"cantidad,omitempty"`
	Fecha    *string  `json:"fecha,omitempty"`
	Precio   *float32 `json:"precio,omitempty"`
	Producto *string  `json:"producto,omitempty"`
}

// GeneratePDFJSONRequestBody defines body for GeneratePDF for application/json ContentType.
type GeneratePDFJSONRequestBody = TemplateRequest

// GenerateReporteVentasJSONRequestBody defines body for GenerateReporteVentas for application/json ContentType.
type GenerateReporteVentasJSONRequestBody = ReporteVentasRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Genera un PDF
	// (POST /generate)
	GeneratePDF(w http.ResponseWriter, r *http.Request)
	// Genera un PDF del reporte de ventas
	// (POST /pdf/ventas)
	GenerateReporteVentas(w http.ResponseWriter, r *http.Request)
	// Visualiza el PDF generado
	// (GET /view)
	ViewPDF(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Genera un PDF
// (POST /generate)
func (_ Unimplemented) GeneratePDF(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Genera un PDF del reporte de ventas
// (POST /pdf/ventas)
func (_ Unimplemented) GenerateReporteVentas(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Visualiza el PDF generado
// (GET /view)
func (_ Unimplemented) ViewPDF(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GeneratePDF operation middleware
func (siw *ServerInterfaceWrapper) GeneratePDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GeneratePDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateReporteVentas operation middleware
func (siw *ServerInterfaceWrapper) GenerateReporteVentas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateReporteVentas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ViewPDF operation middleware
func (siw *ServerInterfaceWrapper) ViewPDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ViewPDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/generate", wrapper.GeneratePDF)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pdf/ventas", wrapper.GenerateReporteVentas)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/view", wrapper.ViewPDF)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xV3W5jNRB+FWvgMpuczVJp99wVlaIiAVUX9QYhNLEniVfHP4znZDms8kA8By+GbKfN",
	"nuZkoUIg7qz5/fzN5/EH0MHF4MlLgvYDJL0lh+V4RzGw0D15wXRHv/SUJNsjh0gslkrUrrjzyQq5cvic",
	"aQ0tfLY4ll4c6i5KNdjPQIZI0AIy4wD7oyGs3pGWHPEDudih0NnWBgVPrRp5E/LhUDAJW7/JBY2ZNHe0",
	"Qy9ocNLr3BnzGYdHR9OO4FZ8xtW7n1ELnnWuQ2en7xRWPJ0mB/amnYzOnvH1K6tR2+Cnvdxl+zqwQ4EW",
	"erYwOw0bhmGYyD8d89Tgq0YmBuvFGixDpF/RxY6gXT7mWy+0Ic4F1qS3OAqDZbO8eNG8ebF8MwU3MulK",
	"8GPGy4tmfjE7XnTdBZRjru/dqjaLHEyvZZwNtwerujztN8HCfgbWr0sNQ0mzjVImAJe3Nyoio9qQJ0ZW",
	"g9rZ1GNnf0NWt1fXKde3UpteXauvS5wEVpe3NzCDHXGqpV7Om3lTNBPJY7TQwqt5M38FM4go28Lxorap",
	"0oihvroxojvSdkXKoISkyKtv3n7/nRoO+FTvMygoTRhzyo2BFg6oqPq4vugvgyki0cEL+dIKY+ysLnmL",
	"d6lqsK6Ov1osT7dF4TQ3skwGWuGeiiHF4FMV1LJpntV+LEdHKeGGnoz96vrAhAlKB2bSgo680N+VwZjs",
	"T9Tbz+CLeoFxylfMgfNgOlQpdFZb6U2NvjiN/vaP3yWYoHxQkdhZsSYUaKl3Dnl4nN3DZLNvEc16cVz8",
	"n9RJ71Vnk2T8hlRNerZsRl/RvySgye/uH6somvUYwuNCWVmf+T2VxaQIjtz9r+SgDHWKK3NHjFUkO0vv",
	"c4cNTapDAntU1ClkvbW7oD7W+okS7i29f1ge/yn5HwEdARyTcv+wkyficiBx3sPQ/viUh7fEO2sCqy5o",
	"7ODwwcJWJLaLRTFuQ5L2dfO6gf1P+z8DAAD//xni0T2wCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
