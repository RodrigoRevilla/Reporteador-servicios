// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// InventarioItem defines model for InventarioItem.
type InventarioItem struct {
	Cantidad  *int     `json:"cantidad,omitempty"`
	Categoria *string  `json:"categoria,omitempty"`
	Id        *string  `json:"id,omitempty"`
	Precio    *float32 `json:"precio,omitempty"`
	Producto  *string  `json:"producto,omitempty"`
}

// ReporteInventarioRequest defines model for ReporteInventarioRequest.
type ReporteInventarioRequest struct {
	Inventario *[]InventarioItem `json:"inventario,omitempty"`
}

// ReporteUsuariosActivosRequest defines model for ReporteUsuariosActivosRequest.
type ReporteUsuariosActivosRequest struct {
	Usuarios *[]UsuarioActivo `json:"usuarios,omitempty"`
}

// ReporteVentasRequest defines model for ReporteVentasRequest.
type ReporteVentasRequest struct {
	Ventas *[]Venta `json:"ventas,omitempty"`
}

// TemplateRequest defines model for TemplateRequest.
type TemplateRequest struct {
	Data *struct {
		Cargo     *string `json:"cargo,omitempty"`
		Dd        *string `json:"dd,omitempty"`
		Levantada *string `json:"levantada,omitempty"`
		Mm        *string `json:"mm,omitempty"`
		Mmmm      *string `json:"mmmm,omitempty"`
		Name      *string `json:"name,omitempty"`
		Nombre    *string `json:"nombre,omitempty"`
		NumActa   *string `json:"num_acta,omitempty"`
		NumFolio  *string `json:"num_folio,omitempty"`
		Obra      *string `json:"obra,omitempty"`
		Template  *string `json:"template,omitempty"`
		Tramite   *string `json:"tramite,omitempty"`
		Ubicacion *string `json:"ubicacion,omitempty"`
		Url       *string `json:"url,omitempty"`
		Yyyy      *string `json:"yyyy,omitempty"`
	} `json:"data,omitempty"`
}

// UsuarioActivo defines model for UsuarioActivo.
type UsuarioActivo struct {
	Activo      *bool               `json:"activo,omitempty"`
	ActivoDesde *openapi_types.Date `json:"activoDesde,omitempty"`
	Email       *string             `json:"email,omitempty"`
	Id          *string             `json:"id,omitempty"`
	Nombre      *string             `json:"nombre,omitempty"`
}

// Venta defines model for Venta.
type Venta struct {
	Cantidad *int     `json:"cantidad,omitempty"`
	Fecha    *string  `json:"fecha,omitempty"`
	Precio   *float32 `json:"precio,omitempty"`
	Producto *string  `json:"producto,omitempty"`
}

// GeneratePDFJSONRequestBody defines body for GeneratePDF for application/json ContentType.
type GeneratePDFJSONRequestBody = TemplateRequest

// GenerateReporteInventarioJSONRequestBody defines body for GenerateReporteInventario for application/json ContentType.
type GenerateReporteInventarioJSONRequestBody = ReporteInventarioRequest

// GenerateReporteUsuariosActivosJSONRequestBody defines body for GenerateReporteUsuariosActivos for application/json ContentType.
type GenerateReporteUsuariosActivosJSONRequestBody = ReporteUsuariosActivosRequest

// GenerateReporteVentasJSONRequestBody defines body for GenerateReporteVentas for application/json ContentType.
type GenerateReporteVentasJSONRequestBody = ReporteVentasRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Genera un PDF
	// (POST /generate)
	GeneratePDF(w http.ResponseWriter, r *http.Request)
	// Genera un PDF del reporte de inventario
	// (POST /pdf/inventario)
	GenerateReporteInventario(w http.ResponseWriter, r *http.Request)
	// Genera un PDF del reporte de usuarios activos
	// (POST /pdf/usuarios-activos)
	GenerateReporteUsuariosActivos(w http.ResponseWriter, r *http.Request)
	// Genera un PDF del reporte de ventas
	// (POST /pdf/ventas)
	GenerateReporteVentas(w http.ResponseWriter, r *http.Request)
	// Visualiza el PDF generado
	// (GET /view)
	ViewPDF(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Genera un PDF
// (POST /generate)
func (_ Unimplemented) GeneratePDF(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Genera un PDF del reporte de inventario
// (POST /pdf/inventario)
func (_ Unimplemented) GenerateReporteInventario(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Genera un PDF del reporte de usuarios activos
// (POST /pdf/usuarios-activos)
func (_ Unimplemented) GenerateReporteUsuariosActivos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Genera un PDF del reporte de ventas
// (POST /pdf/ventas)
func (_ Unimplemented) GenerateReporteVentas(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Visualiza el PDF generado
// (GET /view)
func (_ Unimplemented) ViewPDF(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GeneratePDF operation middleware
func (siw *ServerInterfaceWrapper) GeneratePDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GeneratePDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateReporteInventario operation middleware
func (siw *ServerInterfaceWrapper) GenerateReporteInventario(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateReporteInventario(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateReporteUsuariosActivos operation middleware
func (siw *ServerInterfaceWrapper) GenerateReporteUsuariosActivos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateReporteUsuariosActivos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateReporteVentas operation middleware
func (siw *ServerInterfaceWrapper) GenerateReporteVentas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateReporteVentas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ViewPDF operation middleware
func (siw *ServerInterfaceWrapper) ViewPDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ViewPDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/generate", wrapper.GeneratePDF)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pdf/inventario", wrapper.GenerateReporteInventario)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pdf/usuarios-activos", wrapper.GenerateReporteUsuariosActivos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pdf/ventas", wrapper.GenerateReporteVentas)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/view", wrapper.ViewPDF)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXzW4bNxB+FYLt0ZbWSg0kOtWFk0JBmxp240tRFCNyJNFY/nTIVSoHfqCc+wh+sYLk",
	"WspKXFd24UI3e34/znwzmv3MhdXOGjTB8/Fn7sUCNaQ/J2aJJgApOwmoo8SRdUhBYdILMEFJkPFv/Au0",
	"q5GPT6ojHlYO+ZgrE3COxO+OuICAc0sKOrb8bY0i0P3fRgngaz8fSJl5dFPd2Hzy4fq4qk5Kpo5QKNuF",
	"Mqqq6ojPLGkIfMxntYWw8TWNnmZ0jqxsROh685/ABet2c92tJXZ6gyLECJfoLAXcVOwS/2zQh92iqbVJ",
	"+i+gTuJvCWd8zL8ZbroxbFsx3OrDJj8QwepRQB99E/38mQhqaX0vqqa12xtTGzjHfRKk6/iWfiTpqfvj",
	"SNH2y/8raldDwN7UEgKUWE7z1KsdyklZFNe4BBNAQlGrdY+4R2FAY1lh9ZR6VI3+A0SAXuXM1qr8Jjul",
	"sltoq1dWEmjVo2umSoBQ1pS1VEf5ekYbUqXpXq1Wq4L/bptLje9ydafBsJavZz9Qg+tAU2trBBMjZdNz",
	"9BK7u2JUjU6PqzfHaTetHyNjvQqvQQ2q7ga4acAMHBLeft8KB8LqfXbix6vL45PRq5LphiIb8/cNGHZx",
	"/4Xwdr/Vlidsv+U/Ku3+GYoFlMs1erPvKj+tBqfPX+UXrZSd7fPmKFJmlmJI9IKUC4m//OxiwhwQsDka",
	"JCC2YkvlG6jVLRC7OH/nY3wVctLzd+zHZBcssbOLCT/iSySfQ50MqkGVJs6hAaf4mL8aVIPYRwdhkWo8",
	"zGnyYDmbd1YX0SUKNUUmIVjP0LD3V798YKsWH2tMBMVTEoLoMpF8zFtUmHWU9+EPVqYRE9YENCkVOFcr",
	"kfyGNz5PcF68/7aWt3dtqmlMpAhlnq8k8M4anwk1qqonpe/SUaP3MN/ieuxAroS0TFgiFAE0mtJUlmnQ",
	"LfYj8e6O+Hf5AV2Xt0SWYmNqYN7WSqjQyGx9umv98/2XYKVlxjKHpFVQ0iZovtEaaLXu3UNno27o5GzY",
	"PSse5UpjWK18iG+QyDaOT6bPztHzQmTqPa7+M6ucnHVhrBfMVJlY712aFEnRreNBUYRJrBnlCnZxbsjz",
	"cP0d5983/0QKPbiz1v25RNo6Vl+WTT2X8SFRaqeuB02sbbQbem1O+ieQKjs9l0r5I+NlGdT9kDkk4rS1",
	"O2i6tKRIJFkq/BQzzLHIjmDJAMOaAYmFWlr29e/wDhOuFX56OGz+1+J/BbQDsFuU64d7sWAXDZHijcjH",
	"v23X4QppqaQlVlsBNW8/nfgiBDceDpNwYX0Yv65eV/zu97t/AgAA//8Ezh4c2REAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
