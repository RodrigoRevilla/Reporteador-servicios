// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// TemplateRequest defines model for TemplateRequest.
type TemplateRequest struct {
	Data *struct {
		Cargo     *string `json:"cargo,omitempty"`
		Dd        *string `json:"dd,omitempty"`
		Levantada *string `json:"levantada,omitempty"`
		Mm        *string `json:"mm,omitempty"`
		Mmmm      *string `json:"mmmm,omitempty"`
		Name      *string `json:"name,omitempty"`
		Nombre    *string `json:"nombre,omitempty"`
		NumActa   *string `json:"num_acta,omitempty"`
		NumFolio  *string `json:"num_folio,omitempty"`
		Obra      *string `json:"obra,omitempty"`
		Tramite   *string `json:"tramite,omitempty"`
		Ubicacion *string `json:"ubicacion,omitempty"`
		Url       *string `json:"url,omitempty"`
		Yyyy      *string `json:"yyyy,omitempty"`
	} `json:"data,omitempty"`
	Template *string `json:"template,omitempty"`
}

// GeneratePDFJSONRequestBody defines body for GeneratePDF for application/json ContentType.
type GeneratePDFJSONRequestBody = TemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Genera un PDF
	// (POST /generate)
	GeneratePDF(ctx echo.Context) error
	// Visualiza el PDF generado
	// (GET /view)
	ViewPDF(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GeneratePDF converts echo context to params.
func (w *ServerInterfaceWrapper) GeneratePDF(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GeneratePDF(ctx)
	return err
}

// ViewPDF converts echo context to params.
func (w *ServerInterfaceWrapper) ViewPDF(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ViewPDF(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/generate", wrapper.GeneratePDF)
	router.GET(baseURL+"/view", wrapper.ViewPDF)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RU0W4TOxD9Fcv3PkbZ3FuQqn0rKkVFAqIW9QUhNLEniau1x4xnU5YqH8R38GPI3jQ0",
	"3Q0qb6uZM54zZ+bsvTbkIwUMknR9r5NZo4fy+RF9bEDwCr+2mCSHIlNEFocFYEFgGDXAK8of0kXUtU7C",
	"Lqz0dqKtHQ03uIEgYGE06/2R8JFEAI/jCfILPpJq/RcwAkeTS2rc+Ey04PEyYfBOxvu1C2fAOArjWW5y",
	"fEnsQXStW3Z6MoR1XdeN1G/3UFrcopHCZbfJZ8FzyIVlGddiMuyiFKr6bH6pIjCoFQZkYNWpjUstNO47",
	"sJqfX6TM00mTn5ufX6g3BSfE6mx+qSd6g5z6p/6bzqazol/EANHpWp9MZ9MTPdERZF0Oqerb9LQj9Rd4",
	"yOgKjVugsiCUFAb19vrDe9Xt+Kk2ZFK6NGHIJZdW13rHCvsc99f9imxR01AQDKUVxNg4U+qq29Qvq7dH",
	"/vqXcalr/U/12z/VzjzVU+cUTXMjx2h1LdxiCaRIIfWu+X82+6v2h57zmBKsilD4DXzcb6BXwpIyxIxG",
	"wGMQHJ7T+Bkciv2H97YT/aIf4LDkNTNxXkwDKlHjjJPW9uiXQ/S7nz+ELKlAKiJ7J85SoZZa74G7/e4e",
	"Nptz1cbhXX5rhaMHIsQBFDYK2KzdhtTjMQa3cePw7uEunr2daJeHy9lbd+FC5j2UeyDuI6IHBA/Hv3mw",
	"2wguA5GzxXT96akO18gbZ4lVQwYavfvJ6LVIrKuqBNeUpD6dnc709vP2VwAAAP//l3usbRcGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
